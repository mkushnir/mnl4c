#!/bin/sh

:>logdef.h
:>logdef.c

echo '#include "logdef.h"' >>logdef.c
echo '#include <mrkl4c.h>' >>logdef.c
echo
echo 'void' >>logdef.c
echo 'init_logdef(mrkl4c_logger_t logger)' >>logdef.c
echo '{' >>logdef.c


write_macros() {
    local _n _m
    _n=$1
    _m=$2
    cat >>logdef.h <<EOD
#define ${_n}_LOG(logger, level, msg, ...) MRKL4C_WRITE_ONCE_PRINTFLIKE(logger, level, ${_n}, msg, __VA_ARGS__)
#define ${_n}_LOG_LT(logger, level, msg, ...) MRKL4C_WRITE_ONCE_PRINTFLIKE_LT(logger, level, ${_n}, msg, __VA_ARGS__)
#define ${_n}_LOG_START(logger, level, msg, ...) MRKL4C_WRITE_START_PRINTFLIKE(logger, level, ${_n}, msg, __VA_ARGS__)
#define ${_n}_LOG_START_LT(logger, level, msg, ...) MRKL4C_WRITE_START_PRINTFLIKE_LT(logger, level, ${_n}, msg, __VA_ARGS__)
#define ${_n}_LOG_NEXT(logger, level, msg, fmt, ...) MRKL4C_WRITE_NEXT_PRINTFLIKE(logger, level, ${_n}, msg, fmt, __VA_ARGS__)
#define ${_n}_LOG_STOP(logger, level, msg) MRKL4C_WRITE_STOP_PRINTFLIKE(logger, level, ${_n}, msg)
#define ${_n}_LERROR(logger, msg, ...) ${_n}_LOG_LT(logger, LOG_ERR, msg, __VA_ARGS__)
#define ${_n}_LWARNING(logger, msg, ...) ${_n}_LOG_LT(logger, LOG_WARNING, msg, __VA_ARGS__)
#define ${_n}_LINFO(logger, msg, ...) ${_n}_LOG_LT(logger, LOG_INFO, msg, __VA_ARGS__)
#define ${_n}_LDEBUG(logger, msg, ...) ${_n}_LOG(logger, LOG_DEBUG, msg, __VA_ARGS__)
#define ${_n}_LREG(logger, msg, level) mrkl4c_register_msg(logger, ${_n}_ ## msg ## _ID, level, "${_n}" "_" #msg)
#define ${_n}_NAME ${_m}
#define ${_n}_PREFIX _MRKL4C_TSPIDMOD_FMT
#define ${_n}_ARGS _MRKL4C_TSPIDMOD_ARGS(${_n})
EOD
}




n=0
mid=
while read a b c
do
    if echo $a | grep '^#' >/dev/null 2>&1
    then
        echo $a $b $c | sed -E 's/^#/\/\//' >>logdef.h
        continue
    fi
    if test -z "$c"
    then
        if test -z "$a" -o -z "$b"
        then
            continue
        fi
        mid=$a
        write_macros $a "$b"
    else
        if ! grep --exclude '*logdef.*' -rn "\\b${a}\\b" . >/dev/null 2>&1
        then
            echo "//not used" >>logdef.c
            echo "//not used" >>logdef.h
        fi
        echo "#define ${mid}_${a}_ID $n" >>logdef.h
        echo "#define ${mid}_${a}_FMT $c" >>logdef.h
        echo "    ${mid}_LREG(logger, $a, $b);" >>logdef.c
        n=$(( $n + 1 ))
    fi
done
echo '}' >>logdef.c
